#!/usr/bin/python
import re
import fileinput
import GeoIP


gi = GeoIP.new(GeoIP.GEOIP_MEMORY_CACHE)

def check_and_replace(dictionary, name, value):
    if value is None:
        return

    if name not in dictionary:
        dictionary[name] = value
        return

    if dictionary[name] != value:
        raise RuntimeError("Expected %s but got %s for %s"%(dictionary[name],value,name))


def process_entry(time, host, remain):
        RE_IP = "[0-9:\.]+"
        RE_HOST = "[a-z0-9\.-]+"
        RE_USER = "[a-zA-Z0-9\.!@#_-]+\$?"

        # AUTHENTICATION PASSED
        m = re.match('(Accepted|Postponed) (publickey|password) for (%s) from (%s) port (\d+) ssh2$'%(RE_USER,RE_IP), remain)
        if m is not None:
            auth = m.group(2)
            user = m.group(3)
            ip = m.group(4)
            port = int(m.group(5))
            success = True
            ok = True

            country = gi.country_code_by_addr(ip)
            print "%s %s %s %s %s %s"%(time, host, user, ip, country, auth)


sshd = {}
for line in fileinput.input():
        ok = False

        if not ok:
            m = re.match('([A-Za-z]+ *\d+ \d+:\d+:\d+) ([a-z0-9-]+) ([a-z]+)(\[([0-9]+)\])?: (.*)$', line)
            if m is not None:
                ok = True
                (time, host, process, pid, remain) = (m.group(1),m.group(2),m.group(3),m.group(5),m.group(6))
                process_entry(time, host, remain)


        if not ok:
            m = re.match('([A-Za-z]+ *\d+ \d+:\d+:\d+) last message repeated \d+ times$', line)
            if m is not None:
                ok = True

        if not ok:
            print "---------"
            print line
            eat_my_shorts()
