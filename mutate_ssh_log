#!/usr/bin/python
import xmlrpclib
import re
import fileinput
import GeoIP
import ipaddr
import ConfigParser


CONFIG_FILE = 'mutate_ssh_log.cfg'
config = ConfigParser.RawConfigParser()
config.read(CONFIG_FILE)
server = xmlrpclib.Server(config.get('Default', 'WS_URL'))

gi = GeoIP.new(GeoIP.GEOIP_MEMORY_CACHE)

def process_entry(time, host, remain):
        RE_IP = "[0-9:\.]+"
        RE_HOST = "[a-z0-9\.-]+"
        RE_USER = "[a-zA-Z0-9\.!@#_-]+\$?"

        # AUTHENTICATION PASSED
        m = re.match('Accepted (publickey|password) for (%s) from (%s) port (\d+) ssh2$'%(RE_USER,RE_IP), remain)
        if m is not None:
            auth = m.group(1)
            username = m.group(2)
            ip = m.group(3)
            port = int(m.group(4))

            country = gi.country_code_by_addr(ip)
            subnet = ipaddr.IPv4Network("%s/%d"%(ip, gi.last_netmask()))
            org = "%s/%s"%(subnet.network,subnet.prefixlen)
            print "%s %s %s %s %s %s %s"%(time, host, username, auth, ip, country, org)

            rpc_username = config.get('Default', 'WS_USERNAME')
            rpc_password = config.get('Default', 'WS_PASSWORD')
            output = server.user_account_log(rpc_username, rpc_password, time, host, username, auth, ip)
            print output

num = None
time = None
host = None
remain = None

sshd = {}
for line in fileinput.input():
        ok = False

        if not ok:
            m = re.match('([A-Za-z]+ *\d+ \d+:\d+:\d+) ([a-z0-9-]+) ([a-z]+)(\[([0-9]+)\])?: (.*)$', line)
            if m is not None:
                ok = True
                num = 1
                (time, host, process, pid, remain) = (m.group(1),m.group(2),m.group(3),m.group(5),m.group(6))
                process_entry(time, host, remain)


        if not ok:
            m = re.match('([A-Za-z]+ *\d+ \d+:\d+:\d+) last message repeated (\d+) times$', line)
            if m is not None:
                ok = True
                time = m.group(1)
                total_num = int(m.group(2))
                if num is not None:
                    while num < total_num:
                        process_entry(time, host, remain)
                        num = num + 1

        if not ok:
            print "---------"
            print line
            eat_my_shorts()
